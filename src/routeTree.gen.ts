/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ExampleStoreRouteImport } from './routes/example/store'
import { Route as ExampleRestApiRouteImport } from './routes/example/rest-api'
import { Route as ExampleChatRouteImport } from './routes/example/chat'
import { Route as ExamplePostsIndexRouteImport } from './routes/example/posts/index'
import { Route as ExamplePostsPostIdRouteImport } from './routes/example/posts/$postId'
import { Route as ExampleApiChatRouteImport } from './routes/example/api.chat'
import { Route as ApiTrpcSplatRouteImport } from './routes/api.trpc.$'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleStoreRoute = ExampleStoreRouteImport.update({
  id: '/example/store',
  path: '/example/store',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleRestApiRoute = ExampleRestApiRouteImport.update({
  id: '/example/rest-api',
  path: '/example/rest-api',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleChatRoute = ExampleChatRouteImport.update({
  id: '/example/chat',
  path: '/example/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const ExamplePostsIndexRoute = ExamplePostsIndexRouteImport.update({
  id: '/example/posts/',
  path: '/example/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExamplePostsPostIdRoute = ExamplePostsPostIdRouteImport.update({
  id: '/example/posts/$postId',
  path: '/example/posts/$postId',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleApiChatRoute = ExampleApiChatRouteImport.update({
  id: '/example/api/chat',
  path: '/example/api/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/example/chat': typeof ExampleChatRoute
  '/example/rest-api': typeof ExampleRestApiRoute
  '/example/store': typeof ExampleStoreRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/example/api/chat': typeof ExampleApiChatRoute
  '/example/posts/$postId': typeof ExamplePostsPostIdRoute
  '/example/posts': typeof ExamplePostsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/example/chat': typeof ExampleChatRoute
  '/example/rest-api': typeof ExampleRestApiRoute
  '/example/store': typeof ExampleStoreRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/example/api/chat': typeof ExampleApiChatRoute
  '/example/posts/$postId': typeof ExamplePostsPostIdRoute
  '/example/posts': typeof ExamplePostsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/example/chat': typeof ExampleChatRoute
  '/example/rest-api': typeof ExampleRestApiRoute
  '/example/store': typeof ExampleStoreRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/example/api/chat': typeof ExampleApiChatRoute
  '/example/posts/$postId': typeof ExamplePostsPostIdRoute
  '/example/posts/': typeof ExamplePostsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/example/chat'
    | '/example/rest-api'
    | '/example/store'
    | '/api/trpc/$'
    | '/example/api/chat'
    | '/example/posts/$postId'
    | '/example/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/example/chat'
    | '/example/rest-api'
    | '/example/store'
    | '/api/trpc/$'
    | '/example/api/chat'
    | '/example/posts/$postId'
    | '/example/posts'
  id:
    | '__root__'
    | '/'
    | '/example/chat'
    | '/example/rest-api'
    | '/example/store'
    | '/api/trpc/$'
    | '/example/api/chat'
    | '/example/posts/$postId'
    | '/example/posts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExampleChatRoute: typeof ExampleChatRoute
  ExampleRestApiRoute: typeof ExampleRestApiRoute
  ExampleStoreRoute: typeof ExampleStoreRoute
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute
  ExampleApiChatRoute: typeof ExampleApiChatRoute
  ExamplePostsPostIdRoute: typeof ExamplePostsPostIdRoute
  ExamplePostsIndexRoute: typeof ExamplePostsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/store': {
      id: '/example/store'
      path: '/example/store'
      fullPath: '/example/store'
      preLoaderRoute: typeof ExampleStoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/rest-api': {
      id: '/example/rest-api'
      path: '/example/rest-api'
      fullPath: '/example/rest-api'
      preLoaderRoute: typeof ExampleRestApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/chat': {
      id: '/example/chat'
      path: '/example/chat'
      fullPath: '/example/chat'
      preLoaderRoute: typeof ExampleChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/posts/': {
      id: '/example/posts/'
      path: '/example/posts'
      fullPath: '/example/posts'
      preLoaderRoute: typeof ExamplePostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/posts/$postId': {
      id: '/example/posts/$postId'
      path: '/example/posts/$postId'
      fullPath: '/example/posts/$postId'
      preLoaderRoute: typeof ExamplePostsPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/api/chat': {
      id: '/example/api/chat'
      path: '/example/api/chat'
      fullPath: '/example/api/chat'
      preLoaderRoute: typeof ExampleApiChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExampleChatRoute: ExampleChatRoute,
  ExampleRestApiRoute: ExampleRestApiRoute,
  ExampleStoreRoute: ExampleStoreRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
  ExampleApiChatRoute: ExampleApiChatRoute,
  ExamplePostsPostIdRoute: ExamplePostsPostIdRoute,
  ExamplePostsIndexRoute: ExamplePostsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
